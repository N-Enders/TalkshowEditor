[gd_scene load_steps=4 format=3 uid="uid://dvuhmjygma4ab"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_v04l4"]
content_margin_left = 18.0
content_margin_top = 12.0
content_margin_right = 18.0
content_margin_bottom = 12.0
bg_color = Color(0.207843, 0.294118, 0.831373, 1)
border_color = Color(0.325, 0.325, 0.325, 0.6)
corner_radius_top_left = 3
corner_radius_top_right = 3
corner_radius_bottom_right = 3
corner_radius_bottom_left = 3
corner_detail = 5

[sub_resource type="Theme" id="Theme_hf7pm"]
GraphNode/styles/panel = SubResource("StyleBoxFlat_v04l4")

[sub_resource type="GDScript" id="GDScript_pfvxb"]
script/source = "extends GraphNode

# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	pass

func selectNode():
	selected = true


func setID(id):
	$cellDetails/VBoxContainer/CellID.text = str(id)
	return id

func getID():
	var regex = RegEx.new()
	regex.compile(\"/[^\\\\d+]/g\")
	var idVal = regex.sub($cellDetails/VBoxContainer/CellID.text,\"\")
	if idVal == \"\":
		return 0
	return setID(int(idVal))

func setLabel(label):
	$cellDetails/VBoxContainer/labelBox.text = label
	return label

func getLabel():
	var regex = RegEx.new()
	regex.compile(\"/[\\\"^\\\"]/g\")
	var idVal = regex.sub($cellDetails/VBoxContainer/CellID.text,\"\")
	return setLabel(int(idVal))


func getData():
	return {
				\"type\":\"label\",
				\"id\": getID(),
				\"position\": position_offset,
				\"data\":{
					\"labelValue\":getLabel()
				}
			}

#{\"type\":\"label\",\"id\":0,\"position\":Vector2(0,0),\"data\":{\"labelValue\":\"\"}}
func loadData(dict):
	setLabel(dict[\"data\"][\"labelValue\"])
	position_offset = dict[\"position\"]
	setID(dict[\"id\"])

func getDictLocation(dict,value):
	if value in dict:
		return {\"dict\":dict,\"location\":dict.find(value)}
	dict.append(value)
	return {\"dict\":dict,\"location\":dict.find(value)}

func toCellData(cellConnections):
	var datas = []
	var dict = []
	var dictLoc = getDictLocation(dict,getLabel())
	dict = dictLoc[\"dict\"]
	datas.append(str(getID()))
	datas.append(\"[[DictValue#\"+dictLoc[\"location\"]+\"]]\")
	datas.append(\"L\")
	var childId = 0
	if 0 in cellConnections:
		childId = cellConnections[0][\"cellID\"]
	datas.append(cellConnections[0][\"cellID\"])
	return {\"data\":\"|\".join(datas),\"dict\":dict}

func fromCellData(cellData, dict):
	var datas = Array(cellData.split(\"|\"))
	setID(datas.pop_front())
	setLabel(dict[int(datas.pop_front())])
	datas.pop_front()
	return {\"connections\":[{\"from_port\":0,\"to_cell\":datas.pop_front()}]}


func canCompile():
	if not getID() > 0:
		return {\"reasons\":[\"Id must be greater than 0\"]}
	return {\"reasons\":[]}

"

[node name="GraphNode" type="GraphNode"]
offset_right = 448.0
offset_bottom = 95.0
theme = SubResource("Theme_hf7pm")
title = "Label Node"
slot/0/left_enabled = true
slot/0/left_type = 0
slot/0/left_color = Color(1, 1, 1, 1)
slot/0/left_icon = null
slot/0/right_enabled = true
slot/0/right_type = 0
slot/0/right_color = Color(1, 0, 0, 1)
slot/0/right_icon = null
slot/0/draw_stylebox = true
slot/1/left_enabled = false
slot/1/left_type = 0
slot/1/left_color = Color(1, 1, 1, 1)
slot/1/left_icon = null
slot/1/right_enabled = false
slot/1/right_type = 0
slot/1/right_color = Color(1, 1, 1, 1)
slot/1/right_icon = null
slot/1/draw_stylebox = true
script = SubResource("GDScript_pfvxb")

[node name="Connection" type="Container" parent="."]
layout_mode = 2

[node name="cellDetails" type="MarginContainer" parent="."]
layout_mode = 2
size_flags_vertical = 3
theme_override_constants/margin_left = 5
theme_override_constants/margin_right = 5

[node name="VBoxContainer" type="VBoxContainer" parent="cellDetails"]
layout_mode = 2

[node name="labelLabel" type="Label" parent="cellDetails/VBoxContainer"]
layout_mode = 2
text = "Label"

[node name="labelBox" type="TextEdit" parent="cellDetails/VBoxContainer"]
custom_minimum_size = Vector2(0, 40)
layout_mode = 2
placeholder_text = "Empty Label"

[node name="idLabel" type="Label" parent="cellDetails/VBoxContainer"]
layout_mode = 2
text = "Cell ID"

[node name="CellID" type="TextEdit" parent="cellDetails/VBoxContainer"]
custom_minimum_size = Vector2(0, 40)
layout_mode = 2
placeholder_text = "Cell ID (cannot compile without)"
